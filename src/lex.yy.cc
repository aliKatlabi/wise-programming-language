#line 2 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/lex.yy.cc"

#line 4 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[420] =
    {   0,
        0,    0,  139,  137,  124,  125,  137,  128,  129,  137,
      135,  132,  130,  136,    3,   12,  136,  136,  136,  136,
      136,  136,   59,  136,  136,  136,  136,  136,   82,   87,
      136,   91,  136,  119,  136,  136,    0,    0,    1,  127,
      126,  131,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,   20,  136,  136,  136,  136,
      136,  136,   31,  136,  136,  136,   38,   39,   40,  136,
      136,  136,  136,   50,   51,   52,   53,   54,   55,  136,
       58,  136,  136,  136,  136,  136,  136,  136,   67,  136,
      136,  136,  136,  136,   78,  136,  136,  136,  136,  136,

       88,   89,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  108,  136,  136,  112,  136,  116,
      118,  120,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   15,   16,   17,  136,  136,  136,
      136,  136,  136,  136,  136,   27,  136,   32,  136,   34,
      136,   36,   37,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   61,  136,   63,   64,  136,  136,
      136,  136,  136,   70,  136,  136,   74,  136,  136,  136,
      136,  136,  136,  136,   85,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  102,  136,  104,  105,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  121,
      136,  123,    4,  136,  136,  136,    8,  136,  136,  136,
       13,  136,   19,  136,  136,  136,  136,   25,   26,  136,
       29,  136,  136,  136,  136,  136,  136,   45,  136,   47,
      136,  136,   56,    2,  136,  136,  136,  136,   68,  133,
       69,   71,   72,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,   90,   92,  136,  136,  136,  136,  136,
       98,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  114,  136,  136,  136,  136,  136,  136,  136,   10,
       11,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,   41,  136,  136,  136,  136,   48,  134,  136,  136,
       62,   65,  136,   73,  136,  136,  136,  136,  136,  136,
       83,  136,  136,  136,  136,  136,   96,  136,  136,  136,
      101,  136,  106,  107,  136,  136,  111,  113,  115,  117,
      122,  136,  136,    7,  136,  136,  136,   21,   22,  136,
       24,  136,  136,  136,   35,  136,  136,   44,   46,  136,
       57,   60,   66,  136,  136,   77,  136,   80,   81,  136,
      136,   93,  136,   95,   97,   99,  100,  136,  136,  136,
        5,    6,    9,  136,  136,   23,  136,  136,   33,  136,
      136,  136,  136,  136,  136,   84,  136,   94,  103,  136,

      136,   14,  136,   28,   30,   42,  136,   49,   75,   76,
       79,   86,  109,  110,  136,  136,   18,   43,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    4,    1,    1,    1,    1,    5,    6,
        7,    1,    1,    1,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   10,   10,   10,   17,    4,   18,
        4,   19,    1,    1,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,    1,    1,    1,    4,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[422] =
    {   0,
        0,    0,  433,  434,  434,  434,   43,  434,  434,  413,
      434,  434,   39,    0,   35,   56,   40,   77,  398,   25,
      392,  107,   53,  407,   41,   28,   29,   92,   61,    0,
       64,  127,  149,  396,   60,  405,   90,  105,  434,  434,
      434,  434,    0,  404,  387,  400,  387,   27,  393,  397,
      381,   43,  392,  383,  393,    0,  376,   77,  381,  374,
       60,  373,    0,   75,  378,  104,    0,    0,  389,  102,
       96,  389,  374,    0,    0,    0,    0,    0,    0,  387,
        0,  374,  368,  378,   99,  380,  381,  375,  102,  115,
      361,  358,   29,  369,    0,  358,  357,  358,  372,   91,

        0,    0,  372,  360,  354,  117,  370,  349,  368,  116,
      143,  361,  365,  351,    0,  122,  350,  359,  124,  362,
        0,    0,  344,  357,  342,  341,  343,  339,  344,  354,
      345,  349,  343,  346,    0,    0,    0,  347,  324,  328,
      325,  326,  325,  339,  338,  335,  340,    0,  339,    0,
      327,    0,    0,  333,  325,  149,  316,  315,  321,  320,
      311,  327,  318,  328,    0,  307,    0,    0,  322,  321,
      314,  304,  309,    0,  311,  118,    0,  303,  317,  314,
      129,  302,  316,  296,    0,  308,  289,  297,  303,  291,
      305,  297,  290,  293,  151,  294,    0,  292,    0,    0,

      292,  299,  286,  281,  285,  298,  293,  285,  293,    0,
      290,    0,    0,  280,  288,  287,    0,  288,  285,  274,
      282,  276,    0,  271,  284,  275,  278,    0,    0,  264,
      269,  271,  264,  274,  273,  275,  257,    0,  269,    0,
      268,  256,  266,    0,  257,  249,  256,  253,    0,    0,
        0,    0,    0,  248,  264,  246,  260,  244,  246,  239,
      246,  237,  239,    0,    0,  240,  246,  251,  241,  249,
        0,  240,  236,  244,  247,  242,  221,  233,  243,  223,
      238,    0,  236,  229,  224,  213,  218,  216,  223,    0,
        0,  219,  216,  218,  212,  215,  211,  213,  218,  214,

      218,    0,  205,  207,  217,  203,  201,    0,  201,  213,
        0,    0,  213,    0,  203,  206,  194,  198,  198,  191,
        0,  192,  204,  188,  192,  186,    0,  200,  199,  196,
        0,  184,    0,    0,  200,  182,    0,    0,    0,    0,
        0,  186,  179,    0,  192,  182,  174,    0,    0,  180,
        0,  172,  173,  172,    0,  185,  169,    0,    0,  183,
        0,    0,    0,  182,  170,    0,  164,    0,    0,  179,
      164,    0,  168,    0,    0,    0,    0,  156,  160,  174,
        0,    0,    0,  158,  162,    0,  160,  155,    0,  154,
      164,  148,  146,  144,  147,    0,  143,    0,    0,  156,

      138,    0,   97,    0,    0,    0,   77,    0,    0,    0,
        0,    0,    0,    0,   71,   49,    0,    0,  434,  190,
       49
    } ;

static yyconst flex_int16_t yy_def[422] =
    {   0,
      419,    1,  419,  419,  419,  419,  420,  419,  419,  419,
      419,  419,  419,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  420,  420,  419,  419,
      419,  419,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,    0,  419,
      419
    } ;

static yyconst flex_int16_t yy_nxt[480] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,   10,   11,    4,
        4,    4,    4,    4,    4,    4,   12,   13,    4,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   14,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   14,   14,   38,   41,   39,   90,   92,
       43,  130,   91,   70,  178,   42,   44,   45,   46,   71,
       58,   87,   72,   93,   59,   88,  131,  179,   60,   89,
       47,  135,   48,   49,   61,   50,   51,  136,   83,   52,
      123,   98,  418,  145,   53,   84,   85,   54,  124,   99,
       55,  146,   38,   56,   39,  417,   57,   62,  100,  101,

       63,   64,   65,  102,  103,   66,  148,   38,   67,   39,
      141,  416,  142,   94,  149,  185,   68,   74,   75,   76,
       77,   78,   79,   95,  151,  186,  155,   96,  156,  157,
      158,   80,   97,  159,  166,  171,  415,  167,  253,  190,
      172,  152,  254,  173,   81,  153,   82,  104,  191,  105,
      174,  106,  175,  195,  203,  258,  207,  259,  414,  107,
      196,  108,  109,  208,  197,  204,  110,  111,  112,  113,
      114,  236,  115,  116,  117,  198,  118,  119,  199,  272,
      413,  412,  411,  410,  409,  273,  120,  408,  121,  237,
       37,   37,  407,  406,  405,  404,  403,  402,  401,  400,

      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,

      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  257,  256,
      255,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  206,  205,  202,  201,  200,  194,  193,
      192,  189,  188,  187,  184,  183,  182,  181,  180,  177,

      176,  170,  169,  168,  165,  164,  163,  162,  161,  160,
      154,  150,  147,  144,  143,  140,  139,  138,  137,  134,
      133,  132,  129,  128,  127,  126,  125,  122,   86,   73,
       69,   40,  419,    3,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419
    } ;

static yyconst flex_int16_t yy_chk[480] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,   13,    7,   26,   27,
      421,   48,   26,   20,   93,   13,   15,   15,   15,   20,
       17,   25,   20,   27,   17,   25,   48,   93,   17,   25,
       15,   52,   15,   15,   17,   15,   16,   52,   23,   16,
       35,   29,  416,   61,   16,   23,   23,   16,   35,   29,
       16,   61,   37,   16,   37,  415,   16,   18,   29,   31,

       18,   18,   18,   31,   31,   18,   64,   38,   18,   38,
       58,  407,   58,   28,   64,  100,   18,   22,   22,   22,
       22,   22,   22,   28,   66,  100,   70,   28,   70,   71,
       71,   22,   28,   71,   85,   89,  403,   85,  176,  106,
       89,   66,  176,   90,   22,   66,   22,   32,  106,   32,
       90,   32,   90,  110,  116,  181,  119,  181,  401,   32,
      110,   32,   32,  119,  111,  116,   32,   32,   32,   33,
       33,  156,   33,   33,   33,  111,   33,   33,  111,  195,
      400,  397,  395,  394,  393,  195,   33,  392,   33,  156,
      420,  420,  391,  390,  388,  387,  385,  384,  380,  379,

      378,  373,  371,  370,  367,  365,  364,  360,  357,  356,
      354,  353,  352,  350,  347,  346,  345,  343,  342,  336,
      335,  332,  330,  329,  328,  326,  325,  324,  323,  322,
      320,  319,  318,  317,  316,  315,  313,  310,  309,  307,
      306,  305,  304,  303,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  289,  288,  287,  286,  285,  284,
      283,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  270,  269,  268,  267,  266,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  248,  247,  246,  245,
      243,  242,  241,  239,  237,  236,  235,  234,  233,  232,

      231,  230,  227,  226,  225,  224,  222,  221,  220,  219,
      218,  216,  215,  214,  211,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  198,  196,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  184,  183,  182,  180,  179,
      178,  175,  173,  172,  171,  170,  169,  166,  164,  163,
      162,  161,  160,  159,  158,  157,  155,  154,  151,  149,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  123,  120,  118,  117,  114,  113,  112,  109,  108,
      107,  105,  104,  103,   99,   98,   97,   96,   94,   92,

       91,   88,   87,   86,   84,   83,   82,   80,   73,   72,
       69,   65,   62,   60,   59,   57,   55,   54,   53,   51,
       50,   49,   47,   46,   45,   44,   36,   34,   24,   21,
       19,   10,    3,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[139] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
#line 4 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
#include <iostream>
#include <stdlib.h>
#include "Parserbase.h"

#define RED     "\033[31m" 
#define WHITE   "\033[37m"
#define RESET   "\033[0m"
#define GREEN   "\033[32m"
#define MARGIN std::string(7,'\t')
#define LEXERR std::cerr<<MARGIN<<"line_ "<<lineno()<<" ====> "<<yytext<<" :\n"<<MARGIN<<"lexical error"<<RESET<<std::endl; 
#define OUT(a,b) (b?std::cerr<<GREEN<<MARGIN<<a<<" ====> "<<yytext<<RESET<<std::endl:std::cerr<<"");
bool lexeroutput_ = false;

#define VIS lexeroutput_ 


#line 701 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"



#line 810 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 420 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 434 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 29 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("T_STR",VIS); return Parser::T_STR;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_HTML;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 33 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_A  ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 34 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_ABBR  ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 35 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_ACRONYM  ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 36 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_ADDRESS  ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 37 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_APPLET ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 38 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_AREA  ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 39 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_ARTICLE  ;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 40 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_ASIDE  ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 41 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_AUDIO  ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_B  ;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 43 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BASE  ;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 44 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BASEFONT  ;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 45 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BDI  ;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 46 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BDO  ;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BIG  ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BLOCKQUOTE  ;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BODY  ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BR  ;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_BUTTON  ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_CANVAS  ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_CAPTION  ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_CENTER  ;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_CITE  ;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_CODE  ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_COL  ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_COLGROUP  ;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DATA  ;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DATALIST  ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DD  ;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DEL  ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DETAILS  ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DFN  ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DIALOG  ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DIR  ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DIV  ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 68 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DL  ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 69 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_DT  ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 70 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_EM  ;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 71 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_EMBED  ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 72 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FIELDSET  ;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 73 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FIGCAPTION  ;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 74 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FIGURE  ;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 75 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FONT ;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 76 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FOOTER  ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 77 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FORM  ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 78 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FRAME  ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 79 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_FRAMESET  ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 80 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H1; 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 81 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H2; 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 82 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H3; 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 83 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H4; 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 84 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H5; 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 85 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_H6  ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 86 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_HEAD  ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 87 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_HEADER  ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 88 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_HR  ;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 89 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_I  ;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 90 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_IFRAME  ;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 91 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_IMG  ;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 92 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_INPUT  ;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 93 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_INS  ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 94 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_KBD  ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 95 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_LABEL  ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 96 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_LEGEND  ;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 97 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_LI  ;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 98 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_LINK  ;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 99 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_MAIN  ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 100 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_MAP  ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 101 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_MARK  ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 102 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_META  ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 103 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_METER  ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 104 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_NAV  ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 105 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_NOFRAMES  ;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 106 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_NOSCRIPT  ;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 107 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_OBJECT  ;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 108 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_OL  ;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 109 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_OPTGROUP  ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 110 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_OPTION  ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 111 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_OUTPUT  ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 112 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_P  ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 113 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_PARAM  ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 114 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_PICTURE  ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 115 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_PRE  ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 116 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_PROGRESS  ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 117 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_Q  ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 118 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_RP  ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 119 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_RT  ;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 120 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_RUBY  ;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 121 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_S  ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 122 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SAMP  ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 123 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SCRIPT  ;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 124 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SECTION  ;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 125 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SELECT  ;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 126 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SMALL  ;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 127 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SOURCE  ;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 128 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SPAN  ;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 129 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_STRIKE  ;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 130 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_STRONG  ;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 131 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_STYLE  ;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 132 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SUB  ;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 133 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SUMMARY  ;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 134 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SUP  ;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 135 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_SVG  ;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 136 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TABLE  ;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 137 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TBODY  ;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 138 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TD  ;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 139 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TEMPLATE  ;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 140 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TEXTAREA  ;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 141 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TFOOT  ;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 142 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TH  ;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 143 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_THEAD  ;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 144 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TIME  ;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 145 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TITLE  ;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 146 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TR  ;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 147 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TRACK  ;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 148 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_TT  ;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 149 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_U  ;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 150 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_UL  ;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 151 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_VAR  ;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 152 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_VIDEO  ;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 153 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("TAG",VIS); return Parser::T_WBR  ;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 159 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("IND",VIS); 	return Parser::T_INDENT;
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 160 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("NLINE",VIS); 	return Parser::T_NLINE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 162 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("Assign",VIS); 		return Parser::T_ASSIGN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 163 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("Extract",VIS); 	return Parser::T_EXTRACT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 164 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("(",VIS); 			return Parser::T_OPEN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 165 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT(")",VIS); 			return Parser::T_CLOSE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 166 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("<",VIS); 			return Parser::T_GLOBCONT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 167 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("<.",VIS); 			return Parser::T_BLKCONT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 168 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT(":",VIS); 			return Parser::T_COLON;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 169 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("list",VIS); 		return Parser::T_LIST;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 170 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("group",VIS); 		return Parser::T_GROUP;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 171 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("group",VIS); 		return Parser::T_DOT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 174 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
OUT("VARIABLE",VIS); 	return Parser::T_VARIABLE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 176 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
{	
	
    std::cerr << "Line " << lineno() << ": Lexical error." << std::endl;
    exit(1);
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 182 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"
ECHO;
	YY_BREAK
#line 1599 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 420 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 420 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 419);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 182 "/afs/elte.hu/user/a/alikatlabi/web/project_wise/wise-h/src/wise_h.l"



