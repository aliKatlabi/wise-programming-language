// Generated by Bisonc++ V4.01.00 on Sun, 03 May 2020 16:03:12 +0200

#ifndef ParserBase_h_included
#define ParserBase_h_included

#include <vector>
#include <iostream>

// $insert preincludes
#include "wise_h_semantics.h"

namespace // anonymous
{
    struct PI__;
}



class ParserBase
{
    public:
// $insert tokens

    // Symbolic tokens:
    enum Tokens__
    {
        T_HTML = 257,
        T_HEAD,
        T_TITLE,
        T_BODY,
        T_H1,
        T_H2,
        T_H3,
        T_H4,
        T_H5,
        T_H6,
        T_P,
        T_BR,
        T_HR,
        T_ACRONYM,
        T_ABBR,
        T_ADDRESS,
        T_B,
        T_BDI,
        T_BDO,
        T_BIG,
        T_BLOCKQUOTE,
        T_CENTER,
        T_CITE,
        T_CODE,
        T_DEL,
        T_DFN,
        T_EM,
        T_FONT,
        T_I,
        T_INS,
        T_KBD,
        T_MARK,
        T_METER,
        T_PRE,
        T_PROGRESS,
        T_Q,
        T_RP,
        T_RT,
        T_RUBY,
        T_S,
        T_SAMP,
        T_SMALL,
        T_STRIKE,
        T_STRONG,
        T_SUB,
        T_SUP,
        T_TEMPLATE,
        T_TIME,
        T_TT,
        T_U,
        T_WBR,
        T_VIDEO,
        T_OPTION,
        T_FORM,
        T_INPUT,
        T_TEXTAREA,
        T_BUTTON,
        T_SELECT,
        T_OPTGROUP,
        T_OPTON,
        T_LABEL,
        T_FIELDSET,
        T_LEGEND,
        T_DATALIST,
        T_OUTPUT,
        T_FRAME,
        T_FRAMESET,
        T_NOFRAMES,
        T_IFRAME,
        T_IMG,
        T_MAP,
        T_AREA,
        T_CANVAS,
        T_FIGCAPTION,
        T_FIGURE,
        T_PICTURE,
        T_SVG,
        T_AUDIO,
        T_SOURCE,
        T_TRACK,
        T_VAREO,
        T_A,
        T_LINK,
        T_NAV,
        T_UL,
        T_OL,
        T_LI,
        T_DIR,
        T_DL,
        T_DT,
        T_DD,
        T_CAPTION,
        T_TH,
        T_TR,
        T_TD,
        T_THEAD,
        T_TBODY,
        T_TFOOT,
        T_COL,
        T_COLGROUP,
        T_STYLE,
        T_DIV,
        T_SPAN,
        T_HEADER,
        T_FOOTER,
        T_MAIN,
        T_SECTION,
        T_ARTICLE,
        T_ASIDE,
        T_DETAILS,
        T_DIALOG,
        T_SUMMARY,
        T_DATA,
        T_META,
        T_BASE,
        T_BASEFONT,
        T_SCRIPT,
        T_NOSCRIPT,
        T_APPLET,
        T_EMBED,
        T_OBJECT,
        T_PARAM,
        T_VAR,
        T_STR,
        T_VARIABLE,
        T_NLINE,
        T_INDENT,
        T_COLON,
        T_CLOSE,
        T_OPEN,
        T_ASSIGN,
        T_EXTRACT,
        T_QM,
        T_SQM,
        T_LIST,
        T_GROUP,
        T_TABLE,
        T_GLOBCONT,
        T_BLKCONT,
        T_DOT,
    };

// $insert LTYPE
    struct LTYPE__
    {
        int timestamp;
        int first_line;
        int first_column;
        int last_line;
        int last_column;
        char *text;
    };
// $insert STYPE
union STYPE__
{
 std::string *str;
 descriptor *Desc; 
 indent *Ind;
 
};


    private:
        int d_stackIdx__;
        std::vector<size_t>   d_stateStack__;
        std::vector<STYPE__>  d_valueStack__;
// $insert LTYPEstack
        std::vector<LTYPE__>      d_locationStack__;

    protected:
        enum Return__
        {
            PARSE_ACCEPT__ = 0,   // values used as parse()'s return values
            PARSE_ABORT__  = 1
        };
        enum ErrorRecovery__
        {
            DEFAULT_RECOVERY_MODE__,
            UNEXPECTED_TOKEN__,
        };
        bool        d_debug__;
        size_t      d_nErrors__;
        size_t      d_requiredTokens__;
        size_t      d_acceptedTokens__;
        int         d_token__;
        int         d_nextToken__;
        size_t      d_state__;
        STYPE__    *d_vsp__;
        STYPE__     d_val__;
        STYPE__     d_nextVal__;
// $insert LTYPEdata
         LTYPE__   d_loc__;
         LTYPE__  *d_lsp__;

        ParserBase();

        void ABORT() const;
        void ACCEPT() const;
        void ERROR() const;
        void clearin();
        bool debug() const;
        void pop__(size_t count = 1);
        void push__(size_t nextState);
        void popToken__();
        void pushToken__(int token);
        void reduce__(PI__ const &productionInfo);
        void errorVerbose__();
        size_t top__() const;

    public:
        void setDebug(bool mode);
}; 

inline bool ParserBase::debug() const
{
    return d_debug__;
}

inline void ParserBase::setDebug(bool mode)
{
    d_debug__ = mode;
}

inline void ParserBase::ABORT() const
{
    throw PARSE_ABORT__;
}

inline void ParserBase::ACCEPT() const
{
    throw PARSE_ACCEPT__;
}

inline void ParserBase::ERROR() const
{
    throw UNEXPECTED_TOKEN__;
}


// As a convenience, when including ParserBase.h its symbols are available as
// symbols in the class Parser, too.
#define Parser ParserBase


#endif


